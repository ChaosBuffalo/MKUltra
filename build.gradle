buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)


version = "${config.version}"
group = "com.chaosbuffalo.mkultra" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name

minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    mappings = config.mc_mappings
    runDir = "run"

    replaceIn "MKUltra.java"
    replace "@VERSION@", project.version

    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    mavenCentral()
    maven { // BaseMetals
        name 'MMD'
        url 'https://maven.mcmoddev.com/'
    }
}

dependencies {
    deobfCompile("com.mcmoddev:BaseMetals:${config.mc_version_main}-${config.bme_version}") {
        transitive = false
    }
    compile fileTree(dir: 'libs', include: '*.jar')
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}



// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.api.output
    classifier = 'dev'
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier = 'api'
}

jar {
    // add api classes to main package
    from sourceSets.api.output
}

// make sure all of these happen when we run build
build.dependsOn sourceJar, deobfJar, apiJar

